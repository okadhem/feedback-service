<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- this is the service object that we want to make transactional -->
	<!-- <bean id="fooService" class="x.y.service.DefaultFooService"/> -->
	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the FooService interface -->
	<aop:config>
		<!-- DAO Layer -->
		<aop:advisor advice-ref="txAdviceDao"
			pointcut="execution(* com.talan.byblos.*.dao.impl.*.*(..))" />
		<!-- Service Layer -->
		<aop:advisor advice-ref="txAdviceService"
			pointcut="execution(* com.talan.byblos.*.services.impl.*.*(..))" />
	</aop:config>
	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) -->
	<tx:advice id="txAdviceService" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />


			<!-- other methods use the default transaction settings (see below) -->
			<!-- <tx:method name="*" isolation="DEFAULT" propagation="MANDATORY" read-only="false" 
				/> -->
		</tx:attributes>
	</tx:advice>
	<!-- the transactional advice for DAO layer -->
	<tx:advice id="txAdviceDao" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- Read methods don't use a transaction -->
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
			<!-- Exclude Getter/Setter -->
			<tx:method name="set*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="orderedFind*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="initLuceneIndexes*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="refresh*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="has*" propagation="SUPPORTS" read-only="true" />
			<!-- All others methods must use a existing transaction -->
			<tx:method name="*" isolation="DEFAULT" propagation="MANDATORY"
				read-only="false" rollback-for="org.springframework.dao.DataAccessException" /><!-- 
				timeout="50" -->
		</tx:attributes>
	</tx:advice>



	<!-- don't forget the DataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url"
			value="jdbc:postgresql://localhost:5432/Byblos" />
		<property name="username" value="kadhem" />
		<property name="password" value="byblos" />
	</bean>

	<!-- similarly, don't forget the PlatformTransactionManager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- other <bean/> definitions here -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

</beans>